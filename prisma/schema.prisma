datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Doctor {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String          @unique
  password      String?
  emailVerified DateTime?
  image         String?
  companyName   String?
  industryName  String?
  employees     String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  patients      Patients[]
  appointments  Appointments[]
  tasks         Tasks[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user Doctor @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         Doctor   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user Doctor @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

/**
 * **************************************** Patients Schema *****************************************************
 */

model Patients {
  doctorId        String        @db.ObjectId
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  foreName        String
  surName         String
  dob             String
  sex             Sex
  diagnosis       String
  status          PatientStatus
  appointmentDate DateTime?
  phoneNumber     String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  doctor Doctor @relation(fields: [doctorId], references: [id], onDelete: Cascade)
}

enum Sex {
  Male
  Female
}

enum PatientStatus {
  Recovered
  Awaiting_Surgery
  On_Treatment
}

/**
 * ******************************************* Appointments Schema **************************************************************************
 */
model Appointments {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  doctorId          String            @db.ObjectId
  doctorName        String
  patientName       String
  purposeOfVisit    String
  appointmentStatus AppointmentStatus
  startDate         DateTime?
  endDate           DateTime?
  appointmentType   AppointmentType
  isOnline          Boolean
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  doctor Doctor @relation(fields: [doctorId], references: [id], onDelete: Cascade)
}

enum AppointmentStatus {
  Confirmation_Required
  Confirmed
}

enum AppointmentType {
  First_Time
  Follow_Up_Visit
}

/**
 * ******************************************* Tasks Schema **************************************************************************
 */

model Tasks {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  doctorId    String     @db.ObjectId
  title       String
  description String
  status      TaskStatus
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  doctor Doctor @relation(fields: [doctorId], references: [id], onDelete: Cascade)
}

enum TaskStatus {
  NOT_COMPLETED
  COMPLETED
}
